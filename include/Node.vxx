#pragma once
#include "Frame.vxx"
#include "FrameGenerator.vxx"

using NodeReference = ResourceManager::Owner<VSNodeRef>;

struct Node : NodeReference {
private:
	using ExistentialTypeForRemappingFunction = std::function<auto(std::ptrdiff_t, std::size_t)->std::ptrdiff_t>;
	struct ExistentialTypeForRequestFunction {
		using QuantificationBound = auto(std::ptrdiff_t)->std::vector<std::ptrdiff_t>;

	public:
		field(HostedFunction, std::function<QuantificationBound>{});

	public:
		auto& operator=(AnyBut<ExistentialTypeForRequestFunction> auto&& RequestFunction) {
			if constexpr (requires { { RequestFunction(0z) }->std::same_as<std::vector<std::ptrdiff_t>>; })
				HostedFunction = Forward(RequestFunction);
			else
				HostedFunction = [RequestFunction = Forward(RequestFunction)](auto Index) {
					auto TypeErasedContainer = std::vector<std::ptrdiff_t>{};
					if constexpr (requires { { RequestFunction(Index) }->Iterable; })
						for (auto x : RequestFunction(Index))
							if constexpr (std::integral<decltype(x)>)
								TypeErasedContainer.push_back(x);
							else
								static_assert(sizeof(RequestFunction) == -1, "Node: frame index must be an integer.");
					else
						static_assert(sizeof(RequestFunction) == -1, "Node: request function must return an iterable container.");
					return TypeErasedContainer;
				};
			return *this;
		}
		auto operator()(auto Index) const {
			return HostedFunction(Index);
		}
	};

private:
	template<typename AcquisitorType>
	struct FrameAcquisitor {};
	template<template<typename...> typename AcquisitorTypeConstructor, typename ...SampleTypes>
	struct FrameAcquisitor<AcquisitorTypeConstructor<SampleTypes...>> {
		field(Index, 0z);
		field(GeneratorContext, FrameGenerator::ContextProxy{});

	private:
		using AcquisitorType = AcquisitorTypeConstructor<SampleTypes...>;

	private:
		template<typename ...OptionallySpecifiedSampleType>
		auto FetchFromEachOf(auto&& NodeSource) const {
			if constexpr (requires { { NodeSource }->Iterable; })
				return Utility::ContainerManipulators::fMap([this](auto&& x) { return static_cast<const AcquisitorType*>(this)->template FetchFrom<OptionallySpecifiedSampleType...>(x); }, NodeSource);
			else
				return static_cast<const AcquisitorType*>(this)->template FetchFrom<OptionallySpecifiedSampleType...>(NodeSource);
		}

	public:
		auto From(auto&& ...NodeSequence) const requires (sizeof...(NodeSequence) > 0) {
			return Node::InitiateTwoPhaseFrameAcquisitionViaEscapeContinuation(GeneratorContext.Status,
				[&] {
					auto RequestFromEachOf = [this](auto&& NodeSource) {
						if constexpr (requires { { NodeSource }->Iterable; })
							for (auto&& x : NodeSource)
								if constexpr (requires { { x }->SubtypeOf<Node>; })
									static_cast<const AcquisitorType*>(this)->RequestFrom(x);
								else
									static_assert(sizeof...(NodeSequence) == -1, "FrameAcquisitor: an iterable node source must be a node container.");
						else
							if constexpr (requires { { NodeSource }->SubtypeOf<Node>; })
								static_cast<const AcquisitorType*>(this)->RequestFrom(NodeSource);
							else
								static_assert(sizeof...(NodeSequence) == -1, "FrameAcquisitor: a node source must be of node type.");
					};
					(RequestFromEachOf(NodeSequence), ...);
				},
				[&] {
					if constexpr (sizeof...(SampleTypes) <= 1)
						if constexpr (sizeof...(NodeSequence) == 1)
							return FetchFromEachOf<SampleTypes...>(NodeSequence...);
						else if constexpr (requires { std::array{ FetchFromEachOf<SampleTypes...>(NodeSequence)... }; })
							return std::array{ FetchFromEachOf<SampleTypes...>(NodeSequence)... };
						else
							return std::tuple{ FetchFromEachOf<SampleTypes...>(NodeSequence)... };
					else if constexpr (sizeof...(SampleTypes) > 1 && sizeof...(SampleTypes) == sizeof...(NodeSequence))
						if constexpr (requires { std::array{ FetchFromEachOf<SampleTypes>(NodeSequence)... }; })
							return std::array{ FetchFromEachOf<SampleTypes>(NodeSequence)... };
						else
							return std::tuple{ FetchFromEachOf<SampleTypes>(NodeSequence)... };
					else
						static_assert(sizeof...(NodeSequence) == -1, "FrameAcquisitor: the list of specified sample types does not match with the list of node sources.");
				}
			);
		}
	};
	template<typename ...SampleTypes>
	struct SingleFrameAcquisitor : FrameAcquisitor<SingleFrameAcquisitor<SampleTypes...>> {
		auto RequestFrom(auto&& SourceNode) const {
			SourceNode.RequestFrame(this->Index, this->GeneratorContext);
		}
		template<typename ...OptionallySpecifiedSampleType>
		auto FetchFrom(auto&& SourceNode) const {
			if constexpr (sizeof...(OptionallySpecifiedSampleType) == 0)
				return SourceNode.FetchFrame(this->Index, this->GeneratorContext);
			else
				return SourceNode.template FetchFrame<OptionallySpecifiedSampleType...>(this->Index, this->GeneratorContext);
		}
	};
	template<typename ...SampleTypes>
	struct MultipleFrameAcquisitor : FrameAcquisitor<MultipleFrameAcquisitor<SampleTypes...>> {
		auto RequestFrom(auto&& SourceNode) const {
			SourceNode.RequestFrames(this->Index, this->GeneratorContext);
		}
		template<typename SampleType>
		auto FetchFrom(auto&& SourceNode) const {
			return SourceNode.template FetchFrames<SampleType>(this->Index, this->GeneratorContext);
		}
	};

public:
	static inline auto DefaultRequestFunction = ExistentialTypeForRequestFunction{ [](auto Index) { return std::vector{ Index }; } };
	static inline auto DefaultRemappingFunction = ExistentialTypeForRemappingFunction{ RemappingFunctions::Reflect };

public:
	field(FrameRequestor, DefaultRequestFunction);
	field(OutOfBoundsRemapping, DefaultRemappingFunction);

public:
	Node() = default;
	Node(ExplicitlyConvertibleTo<HandleType> auto&& Handle) : NodeReference{ Forward(Handle) } {}

protected:
	static auto InitiateTwoPhaseFrameAcquisitionViaEscapeContinuation(auto GeneratorStatus, auto&& FrameRequestingPhase, auto&& FrameFetchingPhase) {
		if (GeneratorStatus == VSActivationReason::arAllFramesReady)
			return FrameFetchingPhase();
		else if (GeneratorStatus == VSActivationReason::arInitial)
			FrameRequestingPhase();
		throw FrameGenerator::ResourceAcquisitionInProgress{};
	}

public:
	auto RequestFrame(std::integral auto Index, auto GeneratorContext) const {
		UniversalContext::API->requestFrameFilter(Index, Handle, GeneratorContext);
	}
	auto FetchFrame(std::integral auto Index, auto GeneratorContext) const {
		return Frame{ UniversalContext::API->getFrameFilter(Index, Handle, GeneratorContext) };
	}
	auto AcquireFrame(std::integral auto Index, auto GeneratorContext) const {
		return InitiateTwoPhaseFrameAcquisitionViaEscapeContinuation(GeneratorContext.Status,
			[&] { RequestFrame(Index, GeneratorContext); },
			[&] { return FetchFrame(Index, GeneratorContext); }
		);
	}
	auto operator[](std::integral auto Index) const {
		auto ErrorMessageBuffer = std::array<char, 1024>{};
		auto FrameHandle = UniversalContext::API->getFrame(Index, Handle, ErrorMessageBuffer.data(), 1024);
		if (FrameHandle == Frame::NullHandle)
			throw std::runtime_error{ ErrorMessageBuffer.data() };
		return Frame{ FrameHandle };
	}
	auto ExpectFrame(std::integral auto Index) const {
		auto Expectation = new std::promise<Frame>{};
		auto Materialize = [](auto ExpectationPointer, auto ExpectedFrame, auto, auto, auto ErrorMessage) {
			auto Expectation = reinterpret_cast<std::promise<Frame>*>(ExpectationPointer);
			if (ErrorMessage == nullptr)
				Expectation->set_value(ExpectedFrame);
			else
				Expectation->set_exception(std::make_exception_ptr(std::runtime_error{ ErrorMessage }));
			delete Expectation;
		};
		UniversalContext::API->getFrameAsync(Index, Handle, Materialize, Expectation);
		return Expectation->get_future();
	}
	template<typename ...SampleTypes>
	static auto AcquireFrameGiven(std::integral auto Index, auto GeneratorContext) {
		return SingleFrameAcquisitor<SampleTypes...>{ Index, GeneratorContext };
	}
	template<typename ...SampleTypes>
	static auto AcquireFramesGiven(std::integral auto Index, auto GeneratorContext) {
		return MultipleFrameAcquisitor<SampleTypes...>{ Index, GeneratorContext };
	}

public:
	auto QueryMediaType() const {
		//Placeholder for API v4.
	}
	auto QueryVideoInfo() const {
		auto [FormatHandle, FrameRateNumerator, FrameRateDenominator, Width, Height, FrameCount, _] = *UniversalContext::API->getVideoInfo(Handle);
		return VideoInfo{
			.Format = FormatHandle == nullptr ? VideoFormat::ConstructIndeterminateInstance() : VideoFormat::AdjustToStandardLayout(*FormatHandle),
			.FrameRateNumerator = FrameRateNumerator, .FrameRateDenominator = FrameRateDenominator,
			.Width = Width, .Height = Height, .FrameCount = FrameCount
		};
	}
	auto QueryAudioInfo() const {
		//Placeholder for API v4.
	}
	auto QueryCachePolicy() const {
		if (auto CachePolicy = UniversalContext::API->getVideoInfo(Handle)->flags; CachePolicy & 0x1 != 0)
			return CacheOptions::Disabled;
		else
			return CacheOptions::Automatic;
	}

public:
	template<SubtypeOf<Node> NodeType>
	operator NodeType() && {
		auto TargetNode = NodeType{ this->Leak() };
		TargetNode.FrameRequestor = std::move(this->FrameRequestor);
		TargetNode.OutOfBoundsRemapping = std::move(this->OutOfBoundsRemapping);
		return TargetNode;
	}
	template<SubtypeOf<Node> NodeType>
	operator NodeType() const & {
		auto TargetNode = NodeType{ this->CloneHandle() };
		TargetNode.FrameRequestor = this->FrameRequestor;
		TargetNode.OutOfBoundsRemapping = this->OutOfBoundsRemapping;
		return TargetNode;
	}

public:
	explicit operator auto() const {
		//Placeholder for API v4.
		auto StringRepresentation = std::ostringstream{};
		StringRepresentation << "Media Type: Video\n" << static_cast<std::string>(QueryVideoInfo()) << "\n";
		StringRepresentation << "Cache Policy: " << (QueryCachePolicy() == CacheOptions::Automatic ? "Automatic" : "Disabled");
		return StringRepresentation.str();
	}
};