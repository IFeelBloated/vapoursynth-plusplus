#pragma once
#include "VideoNode.vxx"
#include "AudioNode.vxx"
#include "Function.vxx"

namespace Utility::Map {
	template<auto NonOwning = false>
	using Reference = ResourceManager::Tracker<VSMap, NonOwning>;

	template<auto Readonly, auto NonOwning>
	struct Item {
		field(Index, 0z);

	private:
		struct SharedState : Reference<NonOwning> {
			field(Key, ""s);

		public:
			SharedState() = default;
			SharedState(auto&& Handle, auto&& Key) : Reference<NonOwning>{ Forward(Handle) } {
				this->Key = static_cast<std::string>(Forward(Key));
			}
		};

	private:
		struct Iterator {
			field(TargetItem, static_cast<const Item*>(nullptr));
			field(Index, 0z);

		public:
			auto operator*() const {
				return TargetItem->operator[](Index);
			}
			auto& operator++() {
				++Index;
				return *this;
			}
			auto operator!=(auto&& OtherIterator) const {
				return Index != OtherIterator.Index;
			}
		};

	public:
		field(StorageAccess, std::shared_ptr<SharedState>{});

	public:
		Item() = default;
		Item(auto&& Handle, ExplicitlyConvertibleTo<std::string> auto&& Key) {
			this->StorageAccess = std::make_shared<SharedState>(Forward(Handle), Forward(Key));
		}
		Item(const Item&) = default;
		Item(Item&&) = default;
		auto& operator=(const Item&) requires Readonly = delete;
		auto& operator=(Item&&) requires Readonly = delete;

	public:
		auto Type() const {
			return static_cast<ItemTypes>(UniversalContext::API->propGetType(StorageAccess->Handle, StorageAccess->Key.data()));
		}
		auto Apply(auto&& PolymorphicFunction) const {
			using enum ItemTypes;
			if (Type() == Int)
				return PolymorphicFunction(static_cast<std::int64_t>(*this));
			else if (Type() == Float)
				return PolymorphicFunction(static_cast<double>(*this));
			else if (Type() == String)
				return PolymorphicFunction(static_cast<const char*>(*this));
			else if (Type() == VideoNode || Type() == AudioNode)
				return PolymorphicFunction(static_cast<NodeReference>(*this));
			else if (Type() == VideoFrame || Type() == AudioFrame)
				return PolymorphicFunction(static_cast<FrameReference>(*this));
			else if (Type() == Function)
				return PolymorphicFunction(static_cast<FunctionReference>(*this));
			else [[unlikely]]
				throw std::runtime_error{ "Item: An ill-formed instance has been detected." };
		}

	public:
		auto Exists() const {
			return Index < QueryStorageSize();
		}
		auto operator[](Countable auto Index) const {
			auto Replica = *this;
			Replica.Index = static_cast<std::ptrdiff_t>(Index);
			return Replica;
		}
		auto size() const {
			return static_cast<std::size_t>(QueryStorageSize() - Index);
		}
		auto begin() const {
			return Iterator{ .TargetItem = this, .Index = Index };
		}
		auto end() const {
			return Iterator{ .TargetItem = this, .Index = QueryStorageSize() };
		}

	public:
		template<std::floating_point TargetType>
		operator TargetType() const {
			return UniversalContext::API->propGetFloat(StorageAccess->Handle, StorageAccess->Key.data(), Index, nullptr);
		}

	public:
		template<Countable TargetType>
		operator TargetType() const {
			return static_cast<TargetType>(UniversalContext::API->propGetInt(StorageAccess->Handle, StorageAccess->Key.data(), Index, nullptr));
		}

	public:
		template<ConstructibleFrom<const char*> TargetType>
		operator TargetType() const {
			return { UniversalContext::API->propGetData(StorageAccess->Handle, StorageAccess->Key.data(), Index, nullptr) };
		}

	public:
		template<SubtypeOf<NodeReference> TargetType>
		operator TargetType() const {
			return { UniversalContext::API->propGetNode(StorageAccess->Handle, StorageAccess->Key.data(), Index, nullptr) };
		}

	public:
		template<SubtypeOf<FrameReference> TargetType>
		operator TargetType() const {
			return { UniversalContext::API->propGetFrame(StorageAccess->Handle, StorageAccess->Key.data(), Index, nullptr) };
		}

	public:
		template<SubtypeOf<FunctionReference> TargetType>
		operator TargetType() const {
			return { UniversalContext::API->propGetFunc(StorageAccess->Handle, StorageAccess->Key.data(), Index, nullptr) };
		}

	public:
		template<Iterable TargetType>
		operator TargetType() const requires requires(TargetType x) {
			{ x }->AnyBut<std::initializer_list<std::decay_t<decltype(*x.begin())>>, std::initializer_list<const std::decay_t<decltype(*x.begin())>>>;
			requires (requires { { x }->ConstructibleFrom<const char*>; } == false);
			requires (requires { { x.Type() }->SubtypeOf<ItemTypes>; } == false);
		} {
			using ElementType = std::decay_t<decltype(*TargetType{}.begin()) > ;
			constexpr auto IsNumber = std::floating_point<ElementType> || Countable<ElementType>;
			constexpr auto IsString = ConstructibleFrom<ElementType, const char*>;
			constexpr auto IsIntrinsicObject = AnyOf<ElementType, NodeReference, FrameReference, FunctionReference>;
			static_assert(IsNumber || IsString || IsIntrinsicObject, "Item: cannot convert an item to a container of unrecognized type.");
			return Utility::ContainerManipulators::MapWithNaturalTransformation<TargetType>([](auto&& x) { return static_cast<ElementType>(x); }, *this);
		}

	private:
		auto QueryStorageSize() const {
			return Utility::Arithmetic::Max(UniversalContext::API->propNumElements(StorageAccess->Handle, StorageAccess->Key.data()), 0);
		}
		auto Insert(auto&& Entity, auto AppendMode) const {
			constexpr auto IsIterable = Iterable<decltype(Entity)>;
			constexpr auto IsCharArray = std::convertible_to<decltype(Entity), const char*>;
			constexpr auto IsCharContainer = requires{ { *Entity.begin() }->SubtypeOf<char>; };
			auto InjectValue = [this](auto&& Value) {
				using ValueType = std::decay_t<decltype(Value)>;
				if constexpr (std::floating_point<ValueType>)
					UniversalContext::API->propSetFloat(StorageAccess->Handle, StorageAccess->Key.data(), Value, VSPropAppendMode::paAppend);
				else if constexpr (Countable<ValueType>)
					UniversalContext::API->propSetInt(StorageAccess->Handle, StorageAccess->Key.data(), static_cast<std::int64_t>(Value), VSPropAppendMode::paAppend);
				else if constexpr (requires { { Value }->ExplicitlyConvertibleTo<const char*>; })
					UniversalContext::API->propSetData(StorageAccess->Handle, StorageAccess->Key.data(), static_cast<const char*>(Value), -1, VSPropAppendMode::paAppend);
				else if constexpr (requires { { Value.size() }->std::integral; { Value.data() }->std::convertible_to<const char*>; })
					UniversalContext::API->propSetData(StorageAccess->Handle, StorageAccess->Key.data(), Value.data(), Value.size(), VSPropAppendMode::paAppend);
				else if constexpr (SubtypeOf<ValueType, NodeReference>)
					UniversalContext::API->propSetNode(StorageAccess->Handle, StorageAccess->Key.data(), Value.Handle, VSPropAppendMode::paAppend);
				else if constexpr (SubtypeOf<ValueType, FrameReference>)
					UniversalContext::API->propSetFrame(StorageAccess->Handle, StorageAccess->Key.data(), Value.Handle, VSPropAppendMode::paAppend);
				else if constexpr (SubtypeOf<ValueType, FunctionReference>)
					UniversalContext::API->propSetFunc(StorageAccess->Handle, StorageAccess->Key.data(), Value.Handle, VSPropAppendMode::paAppend);
				else
					static_assert(sizeof(Value) == -1, "Item: failed to inject an instance of unrecognized type.");
			};
			if (AppendMode == VSPropAppendMode::paReplace)
				Erase();
			if constexpr (requires { { Entity.Type() }->SubtypeOf<ItemTypes>; })
				for (auto&& x : Entity)
					x.Apply(InjectValue);
			else if constexpr (IsIterable && !IsCharArray && !IsCharContainer)
				for (auto&& x : Entity)
					InjectValue(x);
			else
				InjectValue(Entity);
		}

	public:
		auto Erase() const requires (Readonly == false) {
			return UniversalContext::API->propDeleteKey(StorageAccess->Handle, StorageAccess->Key.data()) == 1;
		}
		auto& operator=(auto&& Entity) const requires (Readonly == false) {
			if constexpr (requires { { Entity.Type() }->SubtypeOf<ItemTypes>; })
				if (Entity.StorageAccess->Handle == StorageAccess->Handle && Entity.StorageAccess->Key == StorageAccess->Key)
					return *this;
			Insert(Entity, VSPropAppendMode::paReplace);
			return *this;
		}
		auto& operator+=(auto&& Entity) const requires (Readonly == false) {
			Insert(Entity, VSPropAppendMode::paAppend);
			return *this;
		}
	};

	auto Create() {
		return Reference{ UniversalContext::API->createMap() };
	}
	auto ListKeys(auto MapHandle) {
		auto ItemCount = UniversalContext::API->propNumKeys(MapHandle);
		auto Keys = std::vector<std::string_view>{};
		Keys.resize(ItemCount);
		for (auto x : Range{ ItemCount })
			Keys[x] = UniversalContext::API->propGetKey(MapHandle, x);
		return Keys;
	}
	auto Fill(auto MapHandle, auto&& Key, auto&& Values, auto&& ...Arguments) {
		auto ItemStorage = Item<false>{ MapHandle, Forward(Key) };
		ItemStorage += Values;
		if constexpr (sizeof...(Arguments) != 0)
			Fill(MapHandle, Forward(Arguments)...);
	}
	auto CheckForError(auto MapHandle) {
		auto ErrorMessage = UniversalContext::API->getError(MapHandle);
		return std::tuple{ ErrorMessage != nullptr, ErrorMessage };
	}
	auto DeduceReturnKey(auto MapHandle, auto Fallback) {
		if (auto CandidateKeys = ListKeys(MapHandle); CandidateKeys.size() == 1) [[likely]]
			return CandidateKeys[0];
		else
			return Fallback;
	}
	auto PrintItem(auto&& ItemInstance)->std::string {
		auto GenerateStringRepresentation = [](auto&& Value) {
			auto IndentStructuredRepresentation = [](auto&& RepresentationString) {
				return std::regex_replace("{\n" + std::move(RepresentationString), std::regex{ "\n" }, "\n    ") + "\n}";
			};
			if constexpr (requires { std::to_string(Value); })
				return std::to_string(Value);
			else if constexpr (requires { { Value }->std::convertible_to<const char*>; })
				return "\""s + Value + "\"";
			else if constexpr (requires { { Value }->SubtypeOf<NodeReference>; })
				return IndentStructuredRepresentation(static_cast<std::string>(Node{ Value.Leak() }));
			else if constexpr (requires { { Value }->SubtypeOf<FrameReference>; })
				return IndentStructuredRepresentation(static_cast<std::string>(Frame{ Value.Leak() }));
			else if constexpr (requires { { Value }->SubtypeOf<FunctionReference>; })
				return IndentStructuredRepresentation(static_cast<std::string>(Function{ Value.Leak() }));
		};
		if (ItemInstance.size() > 1) {
			auto StringRepresentation = "["s;
			for (auto&& x : ItemInstance)
				StringRepresentation += x.Apply(GenerateStringRepresentation) + ", ";
			return StringRepresentation.erase(StringRepresentation.size() - 2) + "]";
		}
		else if (ItemInstance.Exists())
			return ItemInstance.Apply(GenerateStringRepresentation);
		else
			return "nullptr";
	}
}

struct ArgumentList {
	field(Handle, static_cast<const VSMap*>(nullptr));

public:
	auto ListSpecifiedParameters() const {
		return Utility::Map::ListKeys(Handle);
	}
	auto operator[](ExplicitlyConvertibleTo<std::string> auto&& Parameter) const {
		return Utility::Map::Item{ Handle, Forward(Parameter) };
	}

public:
	explicit operator auto() const {
		auto StringRepresentation = std::ostringstream{};
		for (auto&& x : ListSpecifiedParameters())
			StringRepresentation << "\n" << x << ": " << Utility::Map::PrintItem(operator[](x));
		return StringRepresentation.str().erase(0, 1);
	}
};

struct ConsoleProxy {
	field(Handle, static_cast<VSMap*>(nullptr));

public:
	auto Receive(ExplicitlyConvertibleTo<std::string> auto&& Key, auto&& Value) const {
		Utility::Map::Fill(Handle, Forward(Key), Forward(Value));
	}
	auto RaiseError(ExplicitlyConvertibleTo<std::string> auto&& FormattedErrorMessage) const {
		auto ErrorMessage = Utility::ExposeCharPointerIfASCIZCompatibleOrDeepCopyIfNot(FormattedErrorMessage);
		UniversalContext::API->setError(Handle, Utility::ExtractCharPointerFromASCIZFormattedString(ErrorMessage));
	}
};